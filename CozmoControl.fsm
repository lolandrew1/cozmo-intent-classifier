

from cozmo_fsm import *
from cozmo.util import degrees
import os
import re
from IntentClassifier import IntentClassifier

classifier = IntentClassifier()
query = ""
command_num = -1
info = []

class ComputePremise(StateNode):
    def __init__(self, **kwargs):
		super().__init__(**kwargs)

    def start(self,event):
        super().start(event)
 
        global query
        query = event.string

        world = robot.world.world_map.objects

        world_map_facts = [""]

        
        for obj_key in world:
            obj = world[obj_key]
            
            # visibility
            try:
                visibility = "visible" if obj.is_visible else "invisible"
                visibility_str = f"{obj_key} is {visibility}"
                world_map_facts.append(visibility_str)
            except:
                pass

            # orientation
            try:
                orientation = obj.orientation
                orientation_str = f"{obj_key} orientation is {orientation}"
                world_map_facts.append(orientation_str)
            except:
                pass

            # position
            try:
                x = obj.x
                y = obj.y
                pos_str = f"{obj_key} position is ({x}, {y})"
                world_map_facts.append(pos_str)
            except:
                pass

        # cozmo premise
        cozX = robot.pose.position.x
		cozY = robot.pose.position.y
        cozmo_visible = "Cozmo is visible"
        cozmo_position = f"Cozmo position is ({cozX}, {cozY})"
        world_map_facts.append(cozmo_visible)
        world_map_facts.append(cozmo_position)

        premise = "\n".join(world_map_facts)

        classifier.setPremise(premise)
        self.post_completion()

class Query(StateNode):
	def __init__(self, **kwargs):
		super().__init__(**kwargs)
		
    def start(self, event=None):
        super().start(event)
        # set command_num
        global command_num, info

        command_num, info = classifier.classify(query)
        
        print("got the command num and info", command_num, info)
        

        self.post_completion()


class Check1(StateNode):
    def __init__(self, **kwargs):
		super().__init__(**kwargs)
		
    def start(self, event=None):
        super().start(event)
        print("checking 1")
        if command_num == 1:
            self.post_success()
        else:
            self.post_failure()


class Check2(StateNode):
    def __init__(self, **kwargs):
		super().__init__(**kwargs)
		
    def start(self, event=None):
        super().start(event)
        print("checking 2")
        if command_num == 2:
            self.post_success()
        else:
            self.post_failure()
            

class Check3(StateNode):
    def __init__(self, **kwargs):
		super().__init__(**kwargs)
		
    def start(self, event=None):
        super().start(event)
        print("checking 3")
        if command_num == 3:
            self.post_success()
        else:
            self.post_failure()


class Check4(StateNode):
    def __init__(self, **kwargs):
		super().__init__(**kwargs)
		
    def start(self, event=None):
        super().start(event)
        print("checking 4")
        if command_num == 4:
            self.post_success()
        else:
            self.post_failure()


class Check5(StateNode):
    def __init__(self, **kwargs):
		super().__init__(**kwargs)
		
    def start(self, event=None):
        super().start(event)
        print("checking 5")
        if command_num == 5:
            self.post_success()
        else:
            self.post_failure()
		

# Move forward _ units
class Command1(Forward):
    def __init__(self, **kwargs):
		super().__init__(**kwargs)
		
    def start(self, event=None):
        self.distance = distance_mm(int(info[0]))
        self.speed = speed_mmps(50)
        super().start(event)


# Turn _ degrees to the _
class Command2(Turn):
    def __init__(self, **kwargs):
		super().__init__(**kwargs)
		
    def start(self, event=None):
        angle, dir = int(info[0]), info[1]

        if dir == "right":
            angle = -angle
        
        self.angle = angle = Angle(degrees=angle)
        super().start(event)


# Pick up _
class Command3(PickUpCube):
    def __init__(self, **kwargs):
		super().__init__(**kwargs)
		
    def start(self, event=None):
        if info[0] == "1":
            self.object = cube1
        elif info[0] == "2":
            self.object = cube2
        else:
            self.object = cube3

        super().start(event)


# Go to _
class Command4(PilotToObject):
    def __init__(self, **kwargs):
		super().__init__(**kwargs)
		
    def start(self, event=None):
        if info[0] == "1":
            self.object = cube1
        elif info[0] == "2":
            self.object = cube2
        else:
            self.object = cube3

        super().start(event)


# Question about knowledge base
class Command5(Say):
    def __init__(self, **kwargs):
		super().__init__(**kwargs)
		
    def start(self, event=None):
        self.text = info[0]
        super().start(event)



class CozmoControl(StateMachineProgram):
    def __init__(self):
        super().__init__(speech=True, speech_debug=True)

	$setup {
        loop: StateNode()
        loop =Hear('cozmo (.*)')=> ComputePremise() =C=> Query() =C=> execute1

        execute1: Check1()
        execute1 =S=> Command1() =C=> loop
        execute1 =F=> execute2

        execute2: Check2()
        execute2 =S=> Command2() =C=> loop
        execute2 =F=> execute3
        
        execute3: Check3()
        execute3 =S=> Command3() =C=> loop
        execute3 =F=> execute4

        execute4: Check4()
        execute4 =S=> Command4() =C=> loop
        execute4 =F=> execute5

        execute5: Check5()
        execute5 =S=> Command5() =C=> loop
        execute5 =F=> Say("Could you be more clear?") =C=> loop
	}


